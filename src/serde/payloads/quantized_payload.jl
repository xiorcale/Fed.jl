using ..Fed: STATS


"""
    QPayload

Payload generated by the quantization compression scheme. `minval` and
`maxval` are metadata fields required to efficiently quantize and dequantize.
"""
mutable struct QPayload{T <: Unsigned}
    data::Vector{T}
    minval::Float32
    maxval::Float32
end


"""
    QuantizedPayloadSerde()

Applies quantization to the weights before serialization in order to reduce
the payload size. This process is lossy, thus a lost of information is to be
expected after the deserialization.
"""
mutable struct QuantizedPayloadSerde{T <: Unsigned} <: PayloadSerde
    qmin::T
    qmax::T

    QuantizedPayloadSerde{T}() where T <: Unsigned = new(
        typemin(T),
        typemax(T)
    )
end



"""
    serialize_payload(::QuantizedPayloadSerde, weights)

Serializes `weights` with the `QuantizedPayloadSerde` where quantization is 
applied before serialization.
"""
function serialize_payload(
    p::QuantizedPayloadSerde{T},
    weights::Vector{Float32}
)::Vector{UInt8} where T <: Unsigned
    # quantize weights
    q = Quantizer{T}(weights)
    qweights = [quantize(q, w) for w in weights]
    STATS.common.req_data = qweights
    
    payload = QPayload{T}(qweights, q.minval, q.maxval)

    return pack(payload)
end


"""
    deserialize_payload(::QuantizedPayloadSerde, data, from)

Deserializes `data` with the `QuantizedPayloadSerde` where dequantization is
applied after deserialization.
"""
function deserialize_payload(
    p::QuantizedPayloadSerde{T},
    data::Vector{UInt8},
    from::String
)::Vector{Float32} where T <: Unsigned
    payload = unpack(data)

    push!(STATS.common.res_data, payload.data)

    # dequantize weights
    q = Quantizer{T}(p.qmin, p.qmax, payload.minval, payload.maxval)
    weights = [dequantize(q, w) for w in payload.data]

    return weights
end
